// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Lo primero que necesitamos es saber que registro de los 8 tenemos que acceder
    // Es decir, tenemos que usar un DMux8Way para saber a que registro tenemos que dirigirnos
    DMux8Way(in=load, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    // Ya sabiendo que registro debe ser accedido, tomamos los registros y le pasamos la se√±al a cada uno de estos 
    // de acuerdo con la salida del Dmux

    Register(in=in, load=a, out=reg1);
    Register(in=in, load=b, out=reg2);
    Register(in=in, load=c, out=reg3);
    Register(in=in, load=d, out=reg4);
    Register(in=in, load=e, out=reg5);
    Register(in=in, load=f, out=reg6);
    Register(in=in, load=g, out=reg7);
    Register(in=in, load=h, out=reg8);

    // Finalmente, usando un Mux8Way16, podemos dar la salida del registro selecionado 
    Mux8Way16(a=reg1, b=reg2, c=reg3, d=reg4, e=reg5, f=reg6, g=reg7, h=reg8, sel=address, out=out);

}